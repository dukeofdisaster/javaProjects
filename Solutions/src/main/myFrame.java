/**
 *
 * This program uses JFrame objects to display a GUI which the user
 * can use to search for itineraries
 *
 * Completion time: approximately +24hrs
 *
 *
 *
 * @author Joshua Ortiz, Sylvia
 *
 * @version 1.0
 *
 */
package main;

import java.awt.*;
import javax.swing.*;
import java.util.*;
import java.text.NumberFormat;

public class myFrame extends javax.swing.JFrame {

    /**
     * Creates new form TrainFrame
     */
    public myFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    //Initializes UI components and controls
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Change Color");

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel2.setText("Train Type");

        jLabel3.setText("Departure Train Station");

        jLabel4.setText("Destination Station");

        jLabel5.setText("Departure TIme");

        jLabel6.setText("Arrival Time");

        jLabel7.setText("Select Itinerary Object");

        jTextField1.setText("");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setText("");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextField4.setText("");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jTextField5.setText("");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Search Itineraries");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Show Itinerary");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(208, 208, 208))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                                                        .addComponent(jTextField2)
                                                        .addComponent(jTextField3)
                                                        .addComponent(jTextField4)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel7))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jComboBox1, 0, 184, Short.MAX_VALUE)
                                                        .addComponent(jTextField5))))
                                .addContainerGap())
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel3))
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 216, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(jButton2))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {

    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        JComboBox source = (JComboBox) evt.getSource();
        String selection = (String) source.getSelectedItem();
        System.out.println(selection);
    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {
        JSlider source = (JSlider) evt.getSource();
        jPanel1.setBackground(new Color(source.getValue(), source.getValue(),
                source.getValue()));
    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        //String array to store the text from the various fields
        String[] searchFields = new String[5];
        searchFields[0] = jTextField1.getText();
        searchFields[1] = jTextField2.getText();
        searchFields[2] = jTextField3.getText();
        searchFields[3] = jTextField4.getText();
        searchFields[4] = jTextField5.getText();

        //Validate TrainType
        boolean validType = checkValidTrainType(searchFields[0]);
        if (validType == false) {
            JOptionPane.showMessageDialog(new JFrame(), "Invalid TrainType entered:\nCheck the value and try again", "Dialog",
                    JOptionPane.ERROR_MESSAGE);
        }

        //Validate TrainStations
        boolean validStations = checkValidTrainStations();

        //Validate times---shows dialog if invalid
        try {
            checkValidTime(searchFields[3], searchFields[4]);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(new JFrame(), "No data Entered in Time field",
                    "Dialog", JOptionPane.ERROR_MESSAGE);
        }
        //Creates two TrainStation objects and sets them depending on the first char
        // since each value in the TrainStation enum starts with a different letter
        //TrainStation searchDepart = null;
        //TrainStation searchDestination = null;
        if (validStations) {
            try {
                char departStation = jTextField2.getText().charAt(0);
                char destStation = jTextField3.getText().charAt(0);

                //Set searchDepart based on first letter
                switch (departStation) {
                    case 'A':
                        searchDepart = TrainStation.AMS;
                        break;
                    case 'B':
                        searchDepart = TrainStation.BRU;
                        break;
                    case 'C':
                        searchDepart = TrainStation.CDG;
                        break;
                    case 'D':
                        searchDepart = TrainStation.DUS;
                        break;
                    case 'F':
                        searchDepart = TrainStation.FRA;
                        break;
                    case 'L':
                        searchDepart = TrainStation.LHR;
                        break;
                    case 'R':
                        searchDepart = TrainStation.RWA;
                        break;
                    case 'V':
                        searchDepart = TrainStation.VIE;
                    default:
                        break;
                }// ends switch

                //Set searchDestination based on first char of field3
                switch (destStation) {
                    case 'A':
                        searchDestination = TrainStation.AMS;
                        break;
                    case 'B':
                        searchDestination = TrainStation.BRU;
                        break;
                    case 'C':
                        searchDestination = TrainStation.CDG;
                        break;
                    case 'D':
                        searchDestination = TrainStation.DUS;
                        break;
                    case 'F':
                        searchDestination = TrainStation.FRA;
                        break;
                    case 'L':
                        searchDestination = TrainStation.LHR;
                        break;
                    case 'R':
                        searchDestination = TrainStation.RWA;
                        break;
                    case 'V':
                        searchDestination = TrainStation.VIE;
                    default:
                        break;
                }

                System.out.println(searchDepart);
                System.out.println(searchDestination);
            } catch (NoSuchElementException e) {
            }

        }//End creating TrainStations
        /*
        System.out.println(searchFields[0]);
        System.out.println(searchFields[1]);
        System.out.println(searchFields[2]);
        System.out.println(searchFields[3]);
        System.out.println(searchFields[4]);
         */
        boolean goodTimes = checkValidTime(searchFields[3], searchFields[4]);
        System.out.println(goodTimes);
        //Time desiredDeparture = null; <--Moved this variable outside of the method
        // to allow accesc by other methods.
        Time desiredArrival = null;
        if (goodTimes) {
            try {
                desiredDeparture = convertTime(searchFields[3]);
                desiredArrival = convertTime(searchFields[4]);
            } catch (InputMismatchException e) {
                System.out.println("Error, enter time in 24hr Format");
                JOptionPane.showMessageDialog(new JFrame(), "Error: Check format of entered fields.\nUse 24HR format for time", "Dialog", JOptionPane.ERROR_MESSAGE);
            }

        }

        Itinerary[] comboBoxItineraries = searchInstance.manager.findItineraries(searchDepart, searchDestination, desiredDeparture);

        int foundItinerariesLength = comboBoxItineraries.length;

        //Removing alll the items in the JComboBox late down here because we're just
        //going to immediately replace it with items from the search IF all
        // test conditions are MET so we don't populate the drop box with faulty info
        if (goodTimes && validStations && validType) {
            jComboBox1.removeAllItems();

            for (int j = 0; j < (comboBoxItineraries.length); j++) {
                jComboBox1.addItem((j + 1) + " New itinerary");
            }
        }
    } //<--- Ends jButton1 event-----------------------------------------------

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // Notify user of valid search and only execute subsequent code if all
        // textFields are valid.
        if (checkValidTrainStations() && checkValidTrainType(jTextField1.getText())
                && checkValidTime(jTextField4.getText(), jTextField5.getText())) {
            JOptionPane.showMessageDialog(new JFrame(), "TrainRoute search successful!",
                    "Dialog", JOptionPane.PLAIN_MESSAGE);

            // Another array of Itineraries will be created so we can choose an array item.
            Itinerary[] showItineraries = searchInstance.manager.findItineraries(searchDepart,
                    searchDestination, desiredDeparture);
            //We'll check the first char, or charAt(0); of the selected item to
            // determine which itinerary to display.
            String choice = (String) jComboBox1.getSelectedItem();
            char itemNumber = choice.charAt(0);

            //Creating an itinerary object here so we can set it equal to whatever
            // value is selected on the JComboBox and then call methods on it to
            // get the data to display to the jFrame.
            Itinerary x;
            switch (itemNumber) {
                case '1':
                    x = showItineraries[0];
                    break;
                case '2':
                    x = showItineraries[1];
                    break;
                case '3':
                    x = showItineraries[2];
                    break;
                default:
                    x = showItineraries[0];
            }
            //Create an instance of RouteFrame to add our objects to the TextArea
            // as well as use our NumberFormat object.
            RouteFrame showFrame = new RouteFrame(x);

            //If the selected itinerary from the ComboBox doens't have 2 trains
            if (x.getSecondTrainRoute() == null) {
                //we'll access the train type
                String t1Type = x.getFirstTrainRoute().getTrain().toString();

                // Add a header to the textArea and add train type to the frame
                showFrame.addTo("--Train Route Information--\n");
                showFrame.addTo("Train Type: " + t1Type);

                // get the departure station of TrainRoute t1 in the itinerary
                // and add it to the frame.
                String t1DepartureStation = x.getFirstTrainRoute().getSource().toString();
                showFrame.addTo("\nDeparture Station: " + t1DepartureStation);

                // get departure city and add t to the frame
                String t1DepartureCity = TrainStation.getTrainStationCity(x.getFirstTrainRoute().getSource());
                showFrame.addTo("\nDeparture City: " + t1DepartureCity);

                // get destination station and add it to the frame.
                String t1DestinationStation = x.getFirstTrainRoute().getDestination().toString();
                showFrame.addTo("\nDesination Station: " + t1DestinationStation);

                //get destination city and add it to the frame.
                String t1DestinationCity = TrainStation.getTrainStationCity(x.getFirstTrainRoute().getDestination());
                showFrame.addTo("\nDestination City: " + t1DestinationCity);

                // get departure time and add it to the frame
                String t1DepartTime = x.getFirstTrainRoute().getDeparture().toString();
                showFrame.addTo("\nDeparting Time: " + t1DepartTime);

                //get arrival time and add it to the frame.
                String t1ArrivalTime = x.getFirstTrainRoute().getArrival().toString();
                showFrame.addTo("\nArriving at: " + t1ArrivalTime);

                //get train number and add it to the frame.
                String t1TrainNumber = x.getFirstTrainRoute().getNumber();
                showFrame.addTo("\nTrain Number: " + t1TrainNumber);

                //Get cost and add it to the frame
                showFrame.addTo("\nCost: " + showFrame.costFormat.format(x.getFirstTrainRoute().getCost()));
            }//<---ends the case for 1 train, or t2 = null

            // Now we'll handle the case for a 2-Train Itinerary
            if (x.getSecondTrainRoute() != null) {
                showFrame.addTo("---Train Route Information---");

                // get type and add
                String t1Type = x.getFirstTrainRoute().getTrain().toString();
                showFrame.addTo("\nTrain Type: " + t1Type);

                // get and add departure station
                String t1DepartingStation = x.getFirstTrainRoute().getSource().toString();
                showFrame.addTo("\nDeparture Station: " + t1DepartingStation);

                //get and add departure city
                String t1DepartingCity = TrainStation.getTrainStationCity(x.getFirstTrainRoute().getSource());
                showFrame.addTo("\nDeparture City: " + t1DepartingCity);

                // get and add destination station
                String t1DestStation = x.getFirstTrainRoute().getDestination().toString();
                showFrame.addTo("\nDestination Station: " + t1DestStation);

                // get and add dest city
                String t1DestCity = x.getFirstTrainRoute().getDestination().toString();
                showFrame.addTo("\nDestination City: " + t1DestCity);

                // get and add departure time
                String t1DepartingTime = x.getFirstTrainRoute().getDeparture().toString();
                showFrame.addTo("\nDeparting Time: " + t1DepartingTime);

                // get and add arriving time
                String t1ArrivingTime = x.getFirstTrainRoute().getArrival().toString();
                showFrame.addTo("\nArriving Time: " + t1ArrivingTime);

                // get and add train number
                String t1TrainNum = x.getFirstTrainRoute().getNumber();
                showFrame.addTo("\nTrain Number: " + t1TrainNum);
                showFrame.addTo("\n---Connecting Train---\n");

                // get and add t2 type
                String t2Type = x.getSecondTrainRoute().getTrain().toString();
                showFrame.addTo("\nTrain Type: " + t2Type);

                //get and add t2 departure station
                String t2DepartingStation = x.getSecondTrainRoute().getSource().toString();
                showFrame.addTo("\nDeparture Station: " + t2DepartingStation);

                //get and add t2 departing city
                String t2DepartingCity = TrainStation.getTrainStationCity(x.getSecondTrainRoute().getSource());
                showFrame.addTo("\nDeparture City: " + t2DepartingCity);

                // get and add t2 destination station
                String t2DestinationStation = x.getSecondTrainRoute().getDestination().toString();
                showFrame.addTo("\nDestination Station: " + t2DestinationStation);

                //get and add t2 destination city
                String t2DestinationCity = TrainStation.getTrainStationCity(x.getSecondTrainRoute().getSource());
                showFrame.addTo("\nDestination City: " + t2DestinationCity);

                //get and add t2 departing time
                String t2DepartTime = x.getSecondTrainRoute().getDeparture().toString();
                showFrame.addTo("\nDeparting Time: " + t2DepartTime);

                //get and add t2 arrival time
                String t2ArrivalTime = x.getSecondTrainRoute().getArrival().toString();
                showFrame.addTo("\nArriving time: " + t2ArrivalTime);

                //get and add t2 train number
                String t2TrainNumber = x.getSecondTrainRoute().getNumber();
                showFrame.addTo("\nTrain Number: " + t2TrainNumber);

                // get and display total cost.
                showFrame.addTo("\nTotal Cost: " + showFrame.costFormat.format(x.getTotalCost()));

                //
            }
        }
    } //<---ENDS jButton2 event-------------------------------------------------

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private boolean checkValidTrainStations() {
        //Validate Destination--Shows error dialog box if invalid
        if ((isInEnum(jTextField3.getText(), TrainStation.class)) == false) {
            JOptionPane.showMessageDialog(new JFrame(), "Invalid Destination"
                    + "\nCheck value and try again", "Dialog",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //Validate Departure Station--Shows error dialog box if invalid
        if ((isInEnum(jTextField2.getText(), TrainStation.class)) == false) {
            JOptionPane.showMessageDialog(new JFrame(), "Invalid Departure"
                    + "Station entered.\nCheck value and try again",
                    "Dialog", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }//<---Ends checkValidTrains------------------------------------------------

    // Takes the input from the jTextField and converts it to a Time object
    // if it meets the criteria
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    public Time convertTime(String s) {
        //String tf4 = jTextField4.getText();
        Scanner scan = new Scanner(s).useDelimiter("\\s*:\\s*");

        int first = 0;
        int second = 0;
        Time convertedTime = new Time(11, 11);

        try {
            while (scan.hasNext()) {
                first = scan.nextInt();
                second = scan.nextInt();
            }
        } catch (NoSuchElementException oneInt) {
            JOptionPane.showMessageDialog(new JFrame(), "Error: did you enter"
                    + "a valid time or only 1 number?", "Dialog",
                    JOptionPane.ERROR_MESSAGE);
        }

        if (first >= 24) {
            JOptionPane.showMessageDialog(new JFrame(), "Error: Hours > 24"
                    + "\nEnter a valid time", "Dialog", JOptionPane.ERROR_MESSAGE);
        } else if (second > 60) {
            JOptionPane.showMessageDialog(new JFrame(), "Error: minutes > 60. Enter a valid time", "Dialog", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                convertedTime = new Time(first, second);
            } catch (NoSuchElementException h) {
                JOptionPane.showMessageDialog(new JFrame(), "Error: Check entered time and try again",
                        "Dialog", JOptionPane.ERROR_MESSAGE);
            }
        }

        scan.close();

        return convertedTime;
    }//<---Ends convertTime()---------------------------------------------------

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private boolean checkValidTrainType(String s) {
        if (isInEnum(s, TrainType.class)) {
            return true;
        }
        return false;
    }//<-----End checkValidTrainType()------------------------------------------

    //Checks two given strings for Time format
    private boolean checkValidTime(String depTime, String arriveTime) {
        int depHour = 99;
        int depMinute = 99;
        int arriveHour = 99;
        int arriveMinute = 99;
        Scanner depScan = new Scanner(depTime).useDelimiter("\\s*:\\s*");
        Scanner arriveScan = new Scanner(arriveTime).useDelimiter("\\s*:\\s*");

        //Corrected for infinite loop; had try{} catch{} nested inside of while{}
        try {
            while (depScan.hasNext()) {
                depHour = depScan.nextInt();
                depMinute = depScan.nextInt();
            }
            while (arriveScan.hasNext()) {
                arriveHour = arriveScan.nextInt();
                arriveMinute = arriveScan.nextInt();

            }
        } catch (NoSuchElementException NSE) {
            System.out.println("Error: checkValidTime could not scan in correct values");
            JOptionPane.showMessageDialog(new JFrame(), "Time Invalid: Use 24hr "
                    + "format.\n Ex: 13:30", "Dialog", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (((depHour >= 0) && (depHour < 24) && (depMinute >= 0) && (depMinute < 60)
                && (arriveHour >= 0) && (arriveHour < 24) && (arriveMinute >= 0)
                && (arriveMinute < 60)) != true) {
            JOptionPane.showMessageDialog(new JFrame(), "Time Invalid: use 24hr "
                    + "format.\n Ex: 13:30", "Dialog", JOptionPane.ERROR_MESSAGE);
            return false;

        }
        return true;
    }// <---Ends checkValidTime()-----------------------------------------------

    // Checks if a string is in a given enum Ex: isInEnum(myString, TrainType);
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    public <E extends Enum<E>> boolean isInEnum(String value, Class<E> enumClass) {
        for (E e : enumClass.getEnumConstants()) {
            if (e.name().equals(value)) {
                return true;
            }

        }
        return false;
    }//<---ends isInEnum()------------------------------------------------------

    static class RouteFrame {

        private int width = 475;
        private int height = 500;
        private JTextArea textField = new JTextArea();
        private Itinerary it = null;
        private JFrame itFrame = new JFrame();
        protected NumberFormat costFormat = NumberFormat.getCurrencyInstance();

        public RouteFrame(Itinerary x) {
            it = x;
            itFrame.setSize(width, height);
            itFrame.setVisible(true);
            itFrame.add(textField);
        }

        public void addTo(String val) {
            textField.append(val);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(myFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(myFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(myFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(myFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new myFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private RouteManagerTest searchInstance = new RouteManagerTest();// End of variables declaration
    private TrainStation searchDepart = null;
    private TrainStation searchDestination = null;
    private Time desiredDeparture = null;
}
